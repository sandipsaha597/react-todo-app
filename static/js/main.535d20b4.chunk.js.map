{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","Header","react_default","a","createElement","style","TodoItem","getStyle","borderBottom","textDecoration","_this","props","todo","completed","_this$props$todo","this","id","task","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","backgroundColor","border","margin","borderRadius","cursor","float","Todos","todos","map","components_TodoItem","key","AppTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","value","display","name","placeholder","flex","className","App","Object","toConsumableArray","filter","newTodo","uuid","v4","concat","layout_Header","AddTodo","components_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.535d20b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n\treturn  (\r\n\t\t<header style={headerStyle}>\r\n\t\t\t<h1>TodoList</h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nconst headerStyle = {\r\n\tbackground: '#333',\r\n\tcolor: '#fff',\r\n\ttextAlign: 'center',\r\n\tpadding: '10px'\r\n}\r\nexport default Header","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass TodoItem extends Component {\r\n\tgetStyle = () => {\r\n\t\treturn {\r\n\t\t\tbackground: '#f4f4f4',\r\n\t\t\tpadding: '10px',\r\n\t\t\tborderBottom: '1px #ccc dotted',\r\n\t\t\ttextDecoration: this.props.todo.completed ?\r\n\t\t\t'line-through' : 'none'\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\r\n  render() {\r\n  \tconst {id, task} = this.props.todo\r\n    return (\r\n    \t<div style={this.getStyle()}>\r\n    \t\t<p>\r\n    \t\t\t<input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />\r\n    \t\t\t{task}\r\n    \t\t\t<button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>X</button>\r\n    \t\t</p>\r\n    \t</div>\r\n    )\r\n  }\r\n}\r\n\r\nconst btnStyle = {\r\n\tbackgroundColor: 'red',\r\n\tcolor: 'white',\r\n\tborder: 'none',\r\n\tmargin: 0,\r\n\tpadding: '10px',\r\n\tborderRadius: '50%',\r\n\tcursor: 'pointer',\r\n\tfloat: 'right'\r\n}\r\n\r\n// Prop types\r\nTodoItem.propTypes = {\r\n\ttodo: PropTypes.object.isRequired\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Todos extends Component {\r\n\r\n\t\r\n\r\n  render() {\r\n    return this.props.todos.map(todo=>(\r\n    \t// <h3>{todo.task}</h3>\r\n    \t<TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\r\n    ))\r\n  }\r\n}\r\n\r\n// Prop types\r\nTodos.propTypes = {\r\n\ttodos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React, {Component} from 'react';\r\n\r\nclass AppTodo extends Component {\r\n\tstate = {\r\n\t\ttask: ''\r\n\t}\r\n\tonSubmit = (e) => {\r\n\t\te.preventDefault()\r\n\t\tthis.props.addTodo(this.state.task)\r\n\t\tthis.setState({task: ''})\r\n\t}\r\n\tonChange = (e) => this.setState({ task: e.target.value})\r\n  render() {\r\n    return (\r\n      <form style={{display: 'flex'}} onSubmit={this.onSubmit}>\r\n      \t<input type='text' name='title' placeholder='Add Todo...' style={{flex: '10'}} value={this.state.task} onChange={this.onChange} />\r\n      \t<input type='submit' name='submit' value='Submit' className='btn' style={{flex: '1'}} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppTodo;\r\n","import React, {Component} from 'react'\nimport uuid from 'uuid'\nimport Header from './components/layout/Header'\nimport Todos from './components/Todos'\nimport AddTodo from './components/AddTodo'\nimport './App.css'\n\n\nclass App extends Component {\n  state = {\n    todos : [\n      \n\n    ]\n  }\n\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo\n    })})\n  }\n  delTodo = (id) => {\n    this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)] })\n  }\n  addTodo = (task) => {\n    const newTodo = {\n      id: uuid.v4(),\n      task, \n      completed: false\n    }\n    this.setState({todos: [...this.state.todos, newTodo] })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='container'>\n          <Header />\n          <AddTodo addTodo={this.addTodo}/>\n          <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}